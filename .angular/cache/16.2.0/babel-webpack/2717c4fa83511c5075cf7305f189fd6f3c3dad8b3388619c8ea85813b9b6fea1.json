{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/diego/OneDrive/Escritorio/Nueva carpeta/RegistrApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomePage = class HomePage {\n  constructor(router, sharedService, serviceGuard, mensajeService, sqliteService) {\n    this.router = router;\n    this.sharedService = sharedService;\n    this.serviceGuard = serviceGuard;\n    this.mensajeService = mensajeService;\n    this.sqliteService = sqliteService;\n    this.segmentValue = 'profesor';\n  }\n  validarYLogin() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const usuario = document.querySelector('input[name=\"User\"]').value;\n      const contrasena = document.querySelector('input[name=\"Pass\"]').value;\n      if (!usuario || !contrasena) {\n        _this.mensajeService.mostrarMensaje('Los campos no pueden estar vacíos.');\n        return;\n      }\n      _this.sqliteService.verificarCredenciales(usuario, contrasena).then(valido => {\n        if (valido) {\n          // Las credenciales son válidas, redirige a la página /menu\n          _this.sharedService.setUsername(usuario);\n          if (_this.segmentValue === 'profesor') {\n            _this.router.navigate(['/menu-profesor']);\n          } else {\n            _this.router.navigate(['/menu']);\n          }\n          // Marcar que el usuario ha pasado por el login\n          _this.serviceGuard.setPassedLogin(true);\n        } else {\n          // Las credenciales son incorrectas, muestra un mensaje de error\n          _this.mensajeService.mostrarMensaje('Usuario o contraseña incorrectos.');\n        }\n      });\n    })();\n  }\n  navigateToMenu() {\n    this.router.navigate(['/menu']);\n  }\n  navigateToForgot() {\n    this.router.navigate(['/forgot-password']);\n  }\n};\nHomePage = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss']\n})], HomePage);\nexport { HomePage };","map":{"version":3,"names":["Component","HomePage","constructor","router","sharedService","serviceGuard","mensajeService","sqliteService","segmentValue","validarYLogin","_this","_asyncToGenerator","usuario","document","querySelector","value","contrasena","mostrarMensaje","verificarCredenciales","then","valido","setUsername","navigate","setPassedLogin","navigateToMenu","navigateToForgot","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\diego\\OneDrive\\Escritorio\\Nueva carpeta\\RegistrApp\\src\\app\\home\\home.page.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SharedService } from '../../services/shared.service';\r\nimport { ServiceGuardService } from '../../services/loginGuard/service-guard.service';\r\nimport { MensajeService } from 'src/services/mensajeService/mensaje.service';\r\nimport { SQLiteService } from '../../services/SQLiteService/sqlite.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: 'home.page.html',\r\n  styleUrls: ['home.page.scss'],\r\n})\r\nexport class HomePage {\r\n  segmentValue: string = 'profesor';\r\n  constructor(\r\n    private router: Router,\r\n    private sharedService: SharedService,\r\n    private serviceGuard: ServiceGuardService,\r\n    private mensajeService: MensajeService,\r\n    private sqliteService: SQLiteService\r\n  ) {}\r\n\r\n\r\n  async validarYLogin() {\r\n    const usuario = (document.querySelector('input[name=\"User\"]') as HTMLInputElement).value;\r\n    const contrasena = (document.querySelector('input[name=\"Pass\"]') as HTMLInputElement).value;\r\n\r\n    if (!usuario || !contrasena) {\r\n      this.mensajeService.mostrarMensaje('Los campos no pueden estar vacíos.');\r\n      return;\r\n    }\r\n\r\n    this.sqliteService.verificarCredenciales(usuario, contrasena).then((valido) => {\r\n      if (valido) {\r\n\r\n        // Las credenciales son válidas, redirige a la página /menu\r\n        this.sharedService.setUsername(usuario);\r\n        if (this.segmentValue === 'profesor') {\r\n          this.router.navigate(['/menu-profesor']);\r\n        } else {\r\n          this.router.navigate(['/menu']);\r\n        }\r\n\r\n        // Marcar que el usuario ha pasado por el login\r\n        this.serviceGuard.setPassedLogin(true);\r\n      } else {\r\n\r\n        // Las credenciales son incorrectas, muestra un mensaje de error\r\n        this.mensajeService.mostrarMensaje('Usuario o contraseña incorrectos.');\r\n      }\r\n    });\r\n  }\r\n\r\n  navigateToMenu() {\r\n    this.router.navigate(['/menu']);\r\n  }\r\n\r\n  navigateToForgot() {\r\n    this.router.navigate(['/forgot-password']);\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AAYzC,IAAaC,QAAQ,GAArB,MAAaA,QAAQ;EAEnBC,YACUC,MAAc,EACdC,aAA4B,EAC5BC,YAAiC,EACjCC,cAA8B,EAC9BC,aAA4B;IAJ5B,KAAAJ,MAAM,GAANA,MAAM;IACN,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,aAAa,GAAbA,aAAa;IANvB,KAAAC,YAAY,GAAW,UAAU;EAO9B;EAGGC,aAAaA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACjB,MAAMC,OAAO,GAAIC,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAsB,CAACC,KAAK;MACxF,MAAMC,UAAU,GAAIH,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAsB,CAACC,KAAK;MAE3F,IAAI,CAACH,OAAO,IAAI,CAACI,UAAU,EAAE;QAC3BN,KAAI,CAACJ,cAAc,CAACW,cAAc,CAAC,oCAAoC,CAAC;QACxE;;MAGFP,KAAI,CAACH,aAAa,CAACW,qBAAqB,CAACN,OAAO,EAAEI,UAAU,CAAC,CAACG,IAAI,CAAEC,MAAM,IAAI;QAC5E,IAAIA,MAAM,EAAE;UAEV;UACAV,KAAI,CAACN,aAAa,CAACiB,WAAW,CAACT,OAAO,CAAC;UACvC,IAAIF,KAAI,CAACF,YAAY,KAAK,UAAU,EAAE;YACpCE,KAAI,CAACP,MAAM,CAACmB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;WACzC,MAAM;YACLZ,KAAI,CAACP,MAAM,CAACmB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;UAGjC;UACAZ,KAAI,CAACL,YAAY,CAACkB,cAAc,CAAC,IAAI,CAAC;SACvC,MAAM;UAEL;UACAb,KAAI,CAACJ,cAAc,CAACW,cAAc,CAAC,mCAAmC,CAAC;;MAE3E,CAAC,CAAC;IAAC;EACL;EAEAO,cAAcA,CAAA;IACZ,IAAI,CAACrB,MAAM,CAACmB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EACjC;EAEAG,gBAAgBA,CAAA;IACd,IAAI,CAACtB,MAAM,CAACmB,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;EAC5C;CACD;AAhDYrB,QAAQ,GAAAyB,UAAA,EALpB1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,gBAAgB;EAC7BC,SAAS,EAAE,CAAC,gBAAgB;CAC7B,CAAC,C,EACW5B,QAAQ,CAgDpB;SAhDYA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}