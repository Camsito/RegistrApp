{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(platform, toastController, sqlite, mensajeService) {\n    this.platform = platform;\n    this.toastController = toastController;\n    this.sqlite = sqlite;\n    this.mensajeService = mensajeService;\n    this.initializeApp();\n  }\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.createDatabase();\n    });\n    // this.agregarCredencial('Cam', '12345');\n    // this.agregarCredencial('Diego', '12345');\n    // retry(2);\n  }\n\n  createDatabase() {\n    this.sqlite.create({\n      name: 'usuarios.db',\n      location: 'default'\n    }).then(db => {\n      // Crea la tabla de credenciales si no existe\n      db.executeSql(`\n        CREATE TABLE IF NOT EXISTS credenciales (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          usuario TEXT,\n          contrasena TEXT\n        )`, []).then(() => console.log('Tabla de credenciales creada')).catch(error => console.error('Error al crear la tabla de credenciales', error));\n    }).catch(error => console.error('Error al abrir la base de datos SQLite', error));\n  }\n  agregarCredencial(usuario, contrasena) {\n    this.sqlite.create({\n      name: 'usuarios.db',\n      location: 'default'\n    }).then(db => {\n      db.executeSql('INSERT INTO credenciales (usuario, contrasena) VALUES (?, ?)', [usuario, contrasena]).then(() => {\n        console.log('Credencial agregada con éxito.');\n      }).catch(error => console.error('Error al agregar la credencial', error));\n    }).catch(error => console.error('Error al abrir la base de datos SQLite', error));\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","AppComponent","constructor","platform","toastController","sqlite","mensajeService","initializeApp","ready","then","createDatabase","create","name","location","db","executeSql","console","log","catch","error","agregarCredencial","usuario","contrasena","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Camsito\\Desktop\\RegistrApp\\src\\app\\app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Platform, ToastController } from '@ionic/angular';\r\nimport { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\r\nimport { retry } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n  styleUrls: ['app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n\r\n  constructor(\r\n    private platform: Platform,\r\n    public toastController: ToastController,\r\n    private sqlite: SQLite,\r\n    private mensajeService: MensajeService\r\n  ) {\r\n    this.initializeApp();\r\n  }\r\n\r\n  \r\n  initializeApp() {\r\n    this.platform.ready().then(() => {\r\n      this.createDatabase();\r\n    });\r\n    // this.agregarCredencial('Cam', '12345');\r\n    // this.agregarCredencial('Diego', '12345');\r\n    // retry(2);\r\n  }\r\n\r\n  createDatabase() {\r\n    this.sqlite.create({\r\n      name: 'usuarios.db',\r\n      location: 'default'\r\n    })\r\n    .then((db: SQLiteObject) => {\r\n      // Crea la tabla de credenciales si no existe\r\n      db.executeSql(`\r\n        CREATE TABLE IF NOT EXISTS credenciales (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          usuario TEXT,\r\n          contrasena TEXT\r\n        )`, [])\r\n        .then(() => console.log('Tabla de credenciales creada'))\r\n        .catch(error => console.error('Error al crear la tabla de credenciales', error));\r\n    })\r\n    .catch(error => console.error('Error al abrir la base de datos SQLite', error));\r\n  }\r\n  agregarCredencial(usuario: string, contrasena: string) {\r\n    this.sqlite.create({\r\n      name: 'usuarios.db',\r\n      location: 'default'\r\n    })\r\n    .then((db: SQLiteObject) => {\r\n      db.executeSql('INSERT INTO credenciales (usuario, contrasena) VALUES (?, ?)', [usuario, contrasena])\r\n        .then(() => {\r\n          console.log('Credencial agregada con éxito.');\r\n        })\r\n        .catch(error => console.error('Error al agregar la credencial', error));\r\n    })\r\n    .catch(error => console.error('Error al abrir la base de datos SQLite', error));\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUzC,IAAaC,YAAY,GAAzB,MAAaA,YAAY;EAEvBC,YACUC,QAAkB,EACnBC,eAAgC,EAC/BC,MAAc,EACdC,cAA8B;IAH9B,KAAAH,QAAQ,GAARA,QAAQ;IACT,KAAAC,eAAe,GAAfA,eAAe;IACd,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,cAAc,GAAdA,cAAc;IAEtB,IAAI,CAACC,aAAa,EAAE;EACtB;EAGAA,aAAaA,CAAA;IACX,IAAI,CAACJ,QAAQ,CAACK,KAAK,EAAE,CAACC,IAAI,CAAC,MAAK;MAC9B,IAAI,CAACC,cAAc,EAAE;IACvB,CAAC,CAAC;IACF;IACA;IACA;EACF;;EAEAA,cAAcA,CAAA;IACZ,IAAI,CAACL,MAAM,CAACM,MAAM,CAAC;MACjBC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE;KACX,CAAC,CACDJ,IAAI,CAAEK,EAAgB,IAAI;MACzB;MACAA,EAAE,CAACC,UAAU,CAAC;;;;;UAKV,EAAE,EAAE,CAAC,CACNN,IAAI,CAAC,MAAMO,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAC,CACvDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC,CAAC;IACpF,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC,CAAC;EACjF;EACAC,iBAAiBA,CAACC,OAAe,EAAEC,UAAkB;IACnD,IAAI,CAACjB,MAAM,CAACM,MAAM,CAAC;MACjBC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE;KACX,CAAC,CACDJ,IAAI,CAAEK,EAAgB,IAAI;MACzBA,EAAE,CAACC,UAAU,CAAC,8DAA8D,EAAE,CAACM,OAAO,EAAEC,UAAU,CAAC,CAAC,CACjGb,IAAI,CAAC,MAAK;QACTO,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC/C,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC,CAAC;IAC3E,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC,CAAC;EACjF;CACD;AArDYlB,YAAY,GAAAsB,UAAA,EALxBvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,oBAAoB;EACjCC,SAAS,EAAE,CAAC,oBAAoB;CACjC,CAAC,C,EACWzB,YAAY,CAqDxB;SArDYA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}