{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Camsito/Desktop/RegistrApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomePage = class HomePage {\n  constructor(router, sharedService, sqlite, serviceGuard, mensajeService) {\n    this.router = router;\n    this.sharedService = sharedService;\n    this.sqlite = sqlite;\n    this.serviceGuard = serviceGuard;\n    this.mensajeService = mensajeService;\n    this.segmentValue = 'profesor';\n  }\n  validarYLogin() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const usuario = document.querySelector('input[name=\"User\"]').value;\n      const contrasena = document.querySelector('input[name=\"Pass\"]').value;\n      if (!usuario || !contrasena) {\n        _this.mostrarMensaje('Los campos no pueden estar vacíos.');\n        return;\n      }\n      _this.sqlite.create({\n        name: 'usuarios.db',\n        location: 'default'\n      }).then(db => {\n        db.executeSql('SELECT * FROM credenciales WHERE usuario = ? AND contrasena = ?', [usuario, contrasena]).then(data => {\n          if (data.rows.length > 0) {\n            // Las credenciales son válidas, redirige a la página /menu\n            _this.sharedService.setUsername(usuario);\n            if (_this.segmentValue === 'profesor') {\n              _this.router.navigate(['/menu-profesor']);\n            } else {\n              _this.router.navigate(['/menu']);\n            }\n            // Marcar que el usuario ha pasado por el login\n            _this.serviceGuard.setPassedLogin(true);\n          } else {\n            // Las credenciales son incorrectas, muestra un mensaje de error\n            _this.mostrarMensaje('Usuario o contraseña incorrectos.');\n          }\n        }).catch(error => {\n          console.error('Error al ejecutar consulta en SQLite', error);\n          _this.mostrarMensaje('Error al verificar las credenciales.');\n        });\n      }).catch(error => {\n        console.error('Error al abrir la base de datos SQLite', error);\n        _this.mostrarMensaje('Error al abrir la base de datos.');\n      });\n    })();\n  }\n  navigateToMenu() {\n    this.router.navigate(['/menu']); // Navigate to the \"Menu\" page\n  }\n\n  navigateToForgot() {\n    this.router.navigate(['/forgot-password']); // Navigate to the \"Forgot\" page\n  }\n};\n\nHomePage = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss']\n})], HomePage);\nexport { HomePage };","map":{"version":3,"names":["Component","HomePage","constructor","router","sharedService","sqlite","serviceGuard","mensajeService","segmentValue","validarYLogin","_this","_asyncToGenerator","usuario","document","querySelector","value","contrasena","mostrarMensaje","create","name","location","then","db","executeSql","data","rows","length","setUsername","navigate","setPassedLogin","catch","error","console","navigateToMenu","navigateToForgot","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Camsito\\Desktop\\RegistrApp\\src\\app\\home\\home.page.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SharedService } from '../../services/shared.service';\r\nimport { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\r\nimport { ServiceGuardService } from '../../services/loginGuard/service-guard.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: 'home.page.html',\r\n  styleUrls: ['home.page.scss'],\r\n})\r\nexport class HomePage {\r\n  segmentValue: string = 'profesor';\r\n  constructor(\r\n    private router: Router,\r\n    private sharedService: SharedService,\r\n    private sqlite: SQLite,\r\n    private serviceGuard: ServiceGuardService,\r\n    private mensajeService: MensajeService\r\n  ) {}\r\n\r\n\r\n  async validarYLogin() {\r\n    const usuario = (document.querySelector('input[name=\"User\"]') as HTMLInputElement).value;\r\n    const contrasena = (document.querySelector('input[name=\"Pass\"]') as HTMLInputElement).value;\r\n\r\n    if (!usuario || !contrasena) {\r\n      this.mostrarMensaje('Los campos no pueden estar vacíos.');\r\n      return;\r\n    }\r\n\r\n    this.sqlite.create({\r\n      name: 'usuarios.db',\r\n      location: 'default'\r\n    })\r\n    .then((db: SQLiteObject) => {\r\n      db.executeSql('SELECT * FROM credenciales WHERE usuario = ? AND contrasena = ?', [usuario, contrasena])\r\n        .then(data => {\r\n          if (data.rows.length > 0) {\r\n            // Las credenciales son válidas, redirige a la página /menu\r\n            this.sharedService.setUsername(usuario);\r\n            if (this.segmentValue === 'profesor') {\r\n              this.router.navigate(['/menu-profesor']);\r\n            } else {\r\n              this.router.navigate(['/menu']);\r\n            }\r\n\r\n            // Marcar que el usuario ha pasado por el login\r\n            this.serviceGuard.setPassedLogin(true);\r\n          } else {\r\n            // Las credenciales son incorrectas, muestra un mensaje de error\r\n            this.mostrarMensaje('Usuario o contraseña incorrectos.');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Error al ejecutar consulta en SQLite', error);\r\n          this.mostrarMensaje('Error al verificar las credenciales.');\r\n        });\r\n    })\r\n    .catch(error => {\r\n      console.error('Error al abrir la base de datos SQLite', error);\r\n      this.mostrarMensaje('Error al abrir la base de datos.');\r\n    });\r\n  }\r\n\r\n  navigateToMenu() {\r\n    this.router.navigate(['/menu']); // Navigate to the \"Menu\" page\r\n  }\r\n\r\n  navigateToForgot() {\r\n    this.router.navigate(['/forgot-password']); // Navigate to the \"Forgot\" page\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AAWzC,IAAaC,QAAQ,GAArB,MAAaA,QAAQ;EAEnBC,YACUC,MAAc,EACdC,aAA4B,EAC5BC,MAAc,EACdC,YAAiC,EACjCC,cAA8B;IAJ9B,KAAAJ,MAAM,GAANA,MAAM;IACN,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,cAAc,GAAdA,cAAc;IANxB,KAAAC,YAAY,GAAW,UAAU;EAO9B;EAGGC,aAAaA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACjB,MAAMC,OAAO,GAAIC,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAsB,CAACC,KAAK;MACxF,MAAMC,UAAU,GAAIH,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAsB,CAACC,KAAK;MAE3F,IAAI,CAACH,OAAO,IAAI,CAACI,UAAU,EAAE;QAC3BN,KAAI,CAACO,cAAc,CAAC,oCAAoC,CAAC;QACzD;;MAGFP,KAAI,CAACL,MAAM,CAACa,MAAM,CAAC;QACjBC,IAAI,EAAE,aAAa;QACnBC,QAAQ,EAAE;OACX,CAAC,CACDC,IAAI,CAAEC,EAAgB,IAAI;QACzBA,EAAE,CAACC,UAAU,CAAC,iEAAiE,EAAE,CAACX,OAAO,EAAEI,UAAU,CAAC,CAAC,CACpGK,IAAI,CAACG,IAAI,IAAG;UACX,IAAIA,IAAI,CAACC,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;YACxB;YACAhB,KAAI,CAACN,aAAa,CAACuB,WAAW,CAACf,OAAO,CAAC;YACvC,IAAIF,KAAI,CAACF,YAAY,KAAK,UAAU,EAAE;cACpCE,KAAI,CAACP,MAAM,CAACyB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;aACzC,MAAM;cACLlB,KAAI,CAACP,MAAM,CAACyB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;YAGjC;YACAlB,KAAI,CAACJ,YAAY,CAACuB,cAAc,CAAC,IAAI,CAAC;WACvC,MAAM;YACL;YACAnB,KAAI,CAACO,cAAc,CAAC,mCAAmC,CAAC;;QAE5D,CAAC,CAAC,CACDa,KAAK,CAACC,KAAK,IAAG;UACbC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;UAC5DrB,KAAI,CAACO,cAAc,CAAC,sCAAsC,CAAC;QAC7D,CAAC,CAAC;MACN,CAAC,CAAC,CACDa,KAAK,CAACC,KAAK,IAAG;QACbC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9DrB,KAAI,CAACO,cAAc,CAAC,kCAAkC,CAAC;MACzD,CAAC,CAAC;IAAC;EACL;EAEAgB,cAAcA,CAAA;IACZ,IAAI,CAAC9B,MAAM,CAACyB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EACnC;;EAEAM,gBAAgBA,CAAA;IACd,IAAI,CAAC/B,MAAM,CAACyB,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;EAC9C;CACD;;AA7DY3B,QAAQ,GAAAkC,UAAA,EALpBnC,SAAS,CAAC;EACToC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,gBAAgB;EAC7BC,SAAS,EAAE,CAAC,gBAAgB;CAC7B,CAAC,C,EACWrC,QAAQ,CA6DpB;SA7DYA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}