{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@awesome-cordova-plugins/sqlite/ngx\";\nclass SQLiteService {\n  constructor(sqlite) {\n    this.sqlite = sqlite;\n  }\n  createDatabase() {\n    return this.sqlite.create({\n      name: 'usuarios.db',\n      location: 'default'\n    });\n  }\n  createTable() {\n    return this.createDatabase().then(db => {\n      return db.executeSql(`\n        CREATE TABLE IF NOT EXISTS credenciales (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          usuario TEXT,\n          contrasena TEXT\n        )`, []).then(() => {\n        console.log('Tabla de credenciales creada');\n      }).catch(error => console.error('Error al crear la tabla de credenciales', error));\n    });\n  }\n  agregarCredencial(usuario, contrasena) {\n    return this.createDatabase().then(db => {\n      return db.executeSql('INSERT INTO credenciales (usuario, contrasena) VALUES (?, ?)', [usuario, contrasena]).then(() => {\n        console.log('Credencial agregada con éxito.');\n      }).catch(error => console.error('Error al agregar la credencial', error));\n    });\n  }\n}\n_class = SQLiteService;\n_class.ɵfac = function SQLiteService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.SQLite));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { SQLiteService };","map":{"version":3,"names":["SQLiteService","constructor","sqlite","createDatabase","create","name","location","createTable","then","db","executeSql","console","log","catch","error","agregarCredencial","usuario","contrasena","i0","ɵɵinject","i1","SQLite","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Camsito\\Desktop\\RegistrApp\\src\\services\\SQLiteService\\sqlite.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SQLiteService {\r\n\r\n  constructor(private sqlite: SQLite) { }\r\n\r\n  createDatabase() {\r\n    return this.sqlite.create({\r\n      name: 'usuarios.db',\r\n      location: 'default'\r\n    });\r\n  }\r\n\r\n  createTable() {\r\n    return this.createDatabase().then((db: SQLiteObject) => {\r\n      return db.executeSql(`\r\n        CREATE TABLE IF NOT EXISTS credenciales (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          usuario TEXT,\r\n          contrasena TEXT\r\n        )`, [])\r\n        .then(() => {\r\n          console.log('Tabla de credenciales creada');\r\n        })\r\n        .catch(error => console.error('Error al crear la tabla de credenciales', error));\r\n    });\r\n  }\r\n\r\n  agregarCredencial(usuario: string, contrasena: string) {\r\n    return this.createDatabase().then((db: SQLiteObject) => {\r\n      return db.executeSql('INSERT INTO credenciales (usuario, contrasena) VALUES (?, ?)', [usuario, contrasena])\r\n        .then(() => {\r\n          console.log('Credencial agregada con éxito.');\r\n        })\r\n        .catch(error => console.error('Error al agregar la credencial', error));\r\n    });\r\n  }\r\n}\r\n"],"mappings":";;;AAGA,MAGaA,aAAa;EAExBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAY;EAEtCC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACD,MAAM,CAACE,MAAM,CAAC;MACxBC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE;KACX,CAAC;EACJ;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACJ,cAAc,EAAE,CAACK,IAAI,CAAEC,EAAgB,IAAI;MACrD,OAAOA,EAAE,CAACC,UAAU,CAAC;;;;;UAKjB,EAAE,EAAE,CAAC,CACNF,IAAI,CAAC,MAAK;QACTG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC7C,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC,CAAC;IACpF,CAAC,CAAC;EACJ;EAEAC,iBAAiBA,CAACC,OAAe,EAAEC,UAAkB;IACnD,OAAO,IAAI,CAACd,cAAc,EAAE,CAACK,IAAI,CAAEC,EAAgB,IAAI;MACrD,OAAOA,EAAE,CAACC,UAAU,CAAC,8DAA8D,EAAE,CAACM,OAAO,EAAEC,UAAU,CAAC,CAAC,CACxGT,IAAI,CAAC,MAAK;QACTG,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC/C,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC,CAAC;IAC3E,CAAC,CAAC;EACJ;;SAlCWd,aAAa;;mBAAbA,MAAa,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;;SAAbrB,MAAa;EAAAsB,OAAA,EAAbtB,MAAa,CAAAuB,IAAA;EAAAC,UAAA,EAFZ;AAAM;SAEPxB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}