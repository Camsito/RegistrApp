{"ast":null,"code":"import { checkAvailability } from './decorators/common';\nimport { get } from './util';\nvar AwesomeCordovaNativePlugin = /** @class */function () {\n  function AwesomeCordovaNativePlugin() {}\n  /**\r\n   * Returns a boolean that indicates whether the plugin is installed\r\n   *\r\n   * @returns {boolean}\r\n   */\n  AwesomeCordovaNativePlugin.installed = function () {\n    var isAvailable = checkAvailability(this.pluginRef) === true;\n    return isAvailable;\n  };\n  /**\r\n   * Returns the original plugin object\r\n   */\n  AwesomeCordovaNativePlugin.getPlugin = function () {\n    if (typeof window !== 'undefined') {\n      return get(window, this.pluginRef);\n    }\n    return null;\n  };\n  /**\r\n   * Returns the plugin's name\r\n   */\n  AwesomeCordovaNativePlugin.getPluginName = function () {\n    var pluginName = this.pluginName;\n    return pluginName;\n  };\n  /**\r\n   * Returns the plugin's reference\r\n   */\n  AwesomeCordovaNativePlugin.getPluginRef = function () {\n    var pluginRef = this.pluginRef;\n    return pluginRef;\n  };\n  /**\r\n   * Returns the plugin's install name\r\n   */\n  AwesomeCordovaNativePlugin.getPluginInstallName = function () {\n    var plugin = this.plugin;\n    return plugin;\n  };\n  /**\r\n   * Returns the plugin's supported platforms\r\n   */\n  AwesomeCordovaNativePlugin.getSupportedPlatforms = function () {\n    var platform = this.platforms;\n    return platform;\n  };\n  AwesomeCordovaNativePlugin.pluginName = '';\n  AwesomeCordovaNativePlugin.pluginRef = '';\n  AwesomeCordovaNativePlugin.plugin = '';\n  AwesomeCordovaNativePlugin.repo = '';\n  AwesomeCordovaNativePlugin.platforms = [];\n  AwesomeCordovaNativePlugin.install = '';\n  return AwesomeCordovaNativePlugin;\n}();\nexport { AwesomeCordovaNativePlugin };","map":{"version":3,"names":["checkAvailability","get","AwesomeCordovaNativePlugin","installed","isAvailable","pluginRef","getPlugin","window","getPluginName","pluginName","getPluginRef","getPluginInstallName","plugin","getSupportedPlatforms","platform","platforms","repo","install"],"sources":["C:/Users/Camsito/Desktop/RegistrApp/node_modules/@awesome-cordova-plugins/core/awesome-cordova-plugin.js"],"sourcesContent":["import { checkAvailability } from './decorators/common';\r\nimport { get } from './util';\r\nvar AwesomeCordovaNativePlugin = /** @class */ (function () {\r\n    function AwesomeCordovaNativePlugin() {\r\n    }\r\n    /**\r\n     * Returns a boolean that indicates whether the plugin is installed\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    AwesomeCordovaNativePlugin.installed = function () {\r\n        var isAvailable = checkAvailability(this.pluginRef) === true;\r\n        return isAvailable;\r\n    };\r\n    /**\r\n     * Returns the original plugin object\r\n     */\r\n    AwesomeCordovaNativePlugin.getPlugin = function () {\r\n        if (typeof window !== 'undefined') {\r\n            return get(window, this.pluginRef);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the plugin's name\r\n     */\r\n    AwesomeCordovaNativePlugin.getPluginName = function () {\r\n        var pluginName = this.pluginName;\r\n        return pluginName;\r\n    };\r\n    /**\r\n     * Returns the plugin's reference\r\n     */\r\n    AwesomeCordovaNativePlugin.getPluginRef = function () {\r\n        var pluginRef = this.pluginRef;\r\n        return pluginRef;\r\n    };\r\n    /**\r\n     * Returns the plugin's install name\r\n     */\r\n    AwesomeCordovaNativePlugin.getPluginInstallName = function () {\r\n        var plugin = this.plugin;\r\n        return plugin;\r\n    };\r\n    /**\r\n     * Returns the plugin's supported platforms\r\n     */\r\n    AwesomeCordovaNativePlugin.getSupportedPlatforms = function () {\r\n        var platform = this.platforms;\r\n        return platform;\r\n    };\r\n    AwesomeCordovaNativePlugin.pluginName = '';\r\n    AwesomeCordovaNativePlugin.pluginRef = '';\r\n    AwesomeCordovaNativePlugin.plugin = '';\r\n    AwesomeCordovaNativePlugin.repo = '';\r\n    AwesomeCordovaNativePlugin.platforms = [];\r\n    AwesomeCordovaNativePlugin.install = '';\r\n    return AwesomeCordovaNativePlugin;\r\n}());\r\nexport { AwesomeCordovaNativePlugin };\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,GAAG,QAAQ,QAAQ;AAC5B,IAAIC,0BAA0B,GAAG,aAAe,YAAY;EACxD,SAASA,0BAA0BA,CAAA,EAAG,CACtC;EACA;AACJ;AACA;AACA;AACA;EACIA,0BAA0B,CAACC,SAAS,GAAG,YAAY;IAC/C,IAAIC,WAAW,GAAGJ,iBAAiB,CAAC,IAAI,CAACK,SAAS,CAAC,KAAK,IAAI;IAC5D,OAAOD,WAAW;EACtB,CAAC;EACD;AACJ;AACA;EACIF,0BAA0B,CAACI,SAAS,GAAG,YAAY;IAC/C,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MAC/B,OAAON,GAAG,CAACM,MAAM,EAAE,IAAI,CAACF,SAAS,CAAC;IACtC;IACA,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;EACIH,0BAA0B,CAACM,aAAa,GAAG,YAAY;IACnD,IAAIC,UAAU,GAAG,IAAI,CAACA,UAAU;IAChC,OAAOA,UAAU;EACrB,CAAC;EACD;AACJ;AACA;EACIP,0BAA0B,CAACQ,YAAY,GAAG,YAAY;IAClD,IAAIL,SAAS,GAAG,IAAI,CAACA,SAAS;IAC9B,OAAOA,SAAS;EACpB,CAAC;EACD;AACJ;AACA;EACIH,0BAA0B,CAACS,oBAAoB,GAAG,YAAY;IAC1D,IAAIC,MAAM,GAAG,IAAI,CAACA,MAAM;IACxB,OAAOA,MAAM;EACjB,CAAC;EACD;AACJ;AACA;EACIV,0BAA0B,CAACW,qBAAqB,GAAG,YAAY;IAC3D,IAAIC,QAAQ,GAAG,IAAI,CAACC,SAAS;IAC7B,OAAOD,QAAQ;EACnB,CAAC;EACDZ,0BAA0B,CAACO,UAAU,GAAG,EAAE;EAC1CP,0BAA0B,CAACG,SAAS,GAAG,EAAE;EACzCH,0BAA0B,CAACU,MAAM,GAAG,EAAE;EACtCV,0BAA0B,CAACc,IAAI,GAAG,EAAE;EACpCd,0BAA0B,CAACa,SAAS,GAAG,EAAE;EACzCb,0BAA0B,CAACe,OAAO,GAAG,EAAE;EACvC,OAAOf,0BAA0B;AACrC,CAAC,CAAC,CAAE;AACJ,SAASA,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}