{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { NgIf } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\nlet ForgotPasswordPage = class ForgotPasswordPage {\n  constructor() {\n    this.emailFormControl = new FormControl('', [Validators.required, Validators.email]);\n    this.matcher = new MyErrorStateMatcher();\n  }\n  ngOnInit() {}\n};\nForgotPasswordPage = __decorate([Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.page.html',\n  styleUrls: ['./forgot-password.page.scss'],\n  imports: [FormsModule, MatFormFieldModule, MatInputModule, ReactiveFormsModule, NgIf]\n})], ForgotPasswordPage);\nexport { ForgotPasswordPage };","map":{"version":3,"names":["Component","FormControl","Validators","ReactiveFormsModule","FormsModule","NgIf","MatInputModule","MatFormFieldModule","MyErrorStateMatcher","isErrorState","control","form","isSubmitted","submitted","invalid","dirty","touched","ForgotPasswordPage","constructor","emailFormControl","required","email","matcher","ngOnInit","__decorate","selector","templateUrl","styleUrls","imports"],"sources":["C:\\Users\\diego\\Downloads\\RegistrApp-main\\RegistrApp\\src\\app\\home\\forgot\\forgot-password\\forgot-password.page.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\nimport {\r\n  FormControl,\r\n  FormGroupDirective,\r\n  NgForm,\r\n  Validators,\r\n  ReactiveFormsModule,\r\n  FormsModule,\r\n} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {NgIf} from '@angular/common';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\n\r\n  \r\n  /** Error when invalid control is dirty, touched, or submitted. */\r\n  export class MyErrorStateMatcher implements ErrorStateMatcher {\r\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n      const isSubmitted = form && form.submitted;\r\n      return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\r\n    }\r\n  }\r\n\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.page.html',\r\n  styleUrls: ['./forgot-password.page.scss'],\r\n  imports: [FormsModule, MatFormFieldModule, MatInputModule, ReactiveFormsModule, NgIf],\r\n})\r\nexport class ForgotPasswordPage implements OnInit {\r\n\r\n  emailFormControl = new FormControl('', [Validators.required, Validators.email]);\r\n\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SACEC,WAAW,EAGXC,UAAU,EACVC,mBAAmB,EACnBC,WAAW,QACN,gBAAgB;AAEvB,SAAQC,IAAI,QAAO,iBAAiB;AACpC,SAAQC,cAAc,QAAO,yBAAyB;AACtD,SAAQC,kBAAkB,QAAO,8BAA8B;AAG7D;AACA,OAAM,MAAOC,mBAAmB;EAC9BC,YAAYA,CAACC,OAA2B,EAAEC,IAAwC;IAChF,MAAMC,WAAW,GAAGD,IAAI,IAAIA,IAAI,CAACE,SAAS;IAC1C,OAAO,CAAC,EAAEH,OAAO,IAAIA,OAAO,CAACI,OAAO,KAAKJ,OAAO,CAACK,KAAK,IAAIL,OAAO,CAACM,OAAO,IAAIJ,WAAW,CAAC,CAAC;EAC5F;;AAUJ,IAAaK,kBAAkB,GAA/B,MAAaA,kBAAkB;EAM7BC,YAAA;IAJA,KAAAC,gBAAgB,GAAG,IAAIlB,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACkB,QAAQ,EAAElB,UAAU,CAACmB,KAAK,CAAC,CAAC;IAE/E,KAAAC,OAAO,GAAG,IAAId,mBAAmB,EAAE;EAEnB;EAEhBe,QAAQA,CAAA,GACR;CAED;AAXYN,kBAAkB,GAAAO,UAAA,EAN9BxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,6BAA6B,CAAC;EAC1CC,OAAO,EAAE,CAACxB,WAAW,EAAEG,kBAAkB,EAAED,cAAc,EAAEH,mBAAmB,EAAEE,IAAI;CACrF,CAAC,C,EACWY,kBAAkB,CAW9B;SAXYA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}